package eu.essi_lab.vlab.ce.controller.services.ecs;

import eu.essi_lab.vlab.core.configuration.BPECSComputeInfrastructure;
import eu.essi_lab.vlab.core.datamodel.BPException;
import eu.essi_lab.vlab.core.datamodel.BPRunStatus;
import eu.essi_lab.vlab.core.datamodel.ContainerOrchestratorCommandResult;
import eu.essi_lab.vlab.core.datamodel.ContainerOrchestratorReservationResult;
import eu.essi_lab.vlab.core.datamodel.VLabDockerContainer;
import eu.essi_lab.vlab.core.datamodel.VLabDockerImage;
import eu.essi_lab.vlab.core.datamodel.VLabDockerResources;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Properties;
import java.util.UUID;
import java.util.stream.Stream;
import org.junit.After;
import org.junit.Assert;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.rules.ExpectedException;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import software.amazon.awssdk.services.ecs.EcsClient;
import software.amazon.awssdk.services.ecs.model.ContainerOverride;
import software.amazon.awssdk.services.ecs.model.RunTaskRequest;
import software.amazon.awssdk.services.ecs.model.RunTaskResponse;
import software.amazon.awssdk.services.ecs.model.StopTaskRequest;
import software.amazon.awssdk.services.ecs.model.StopTaskResponse;
import software.amazon.awssdk.services.ecs.model.Task;

/**
 * @author Mattia Santoro
 */
public class ECSClientTest {

	@Rule
	public final EnvironmentVariables environmentVariables = new EnvironmentVariables();
	@Rule
	public ExpectedException expectedException = ExpectedException.none();
	private File targetFile;
	private String fileLoc;
	private String user = "user";
	private String password = "fake";
	private Logger logger = LoggerFactory.getLogger(ECSClientTest.class);
	private String strategy;

	@Before
	public void write() throws IOException {

		fileLoc = System.getenv("eu.essi_lab.vlab.pwd.file");

		String targetPath = System.getProperty("java.io.tmpdir") + File.separator + "testpwdfile-" + UUID.randomUUID().toString();

		targetFile = new File(targetPath);

		targetFile.createNewFile();

		Properties props = new Properties();

		props.setProperty("dab.dhus.user", user);
		props.setProperty("dab.dhus.pwd", password);

		props.storeToXML(new FileOutputStream(targetFile), "BP Engine autogenerated test file");

		environmentVariables.set("eu.essi_lab.vlab.pwd.file", targetPath);
	}

	@After
	public void resetEnvVars() {
		environmentVariables.set("eu.essi_lab.vlab.pwd.file", fileLoc);
		environmentVariables.set("eu.essi_lab.vlab.compute.scripts.upload", strategy);

		try {
			Stream<Path> files = Files.list(Paths.get("."));

			files.forEach(p -> {
				System.out.println(p);
				if (p.toString().endsWith(".sh")) {
					try {
						Files.delete(p);
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			});

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void testCreateECSManager() throws BPException {
		BPECSComputeInfrastructure i = getEmptyECSInfra();

		//i.setScriptUploadStrategy("remote");

		String core = "core";

		i.setCoreCluster(core);

		String preparetask = "preparetask";

		//i.setPrepareTask(preparetask);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		RunTaskRequest request = Mockito.mock(RunTaskRequest.class);

		ECSTaskManager man = c.createTaskManager(request, ecs_core, 100);

		Assert.assertEquals(100, man.handler.getMaxRetries());

	}

	@Test
	public void downloadFileToTest() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String file = "file";
		String target = "/target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[2];

				if (!core.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		Mockito.doReturn(runTaskResult).when(ecs_core).runTask((RunTaskRequest) Mockito.any());
		ContainerOrchestratorCommandResult result = c.downloadFileTo(file, target, 10L);

		assertTrue(result.isSuccess());
	}

	@Test
	public void downloadFileToTest2() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String file = "file";
		String target = "/target";

		ContainerOrchestratorCommandResult resultfail = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(false).when(resultfail).isSuccess();

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[2];

				if (!core.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultfail;
			}
		}).when(taskManager).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		Mockito.doReturn(runTaskResult).when(ecs_core).runTask((RunTaskRequest) Mockito.any());

		ContainerOrchestratorCommandResult result = c.downloadFileTo(file, target, 10L);

		assertFalse(result.isSuccess());
	}

	@Test
	public void downloadFileToTest3() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String file = "file";
		String target = "/target";

		ContainerOrchestratorCommandResult resultfail = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(false).when(resultfail).isSuccess();

		Mockito.doReturn(resultfail).when(c).mkDir(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		ContainerOrchestratorCommandResult result = c.downloadFileTo(file, target, 10L);

		assertFalse(result.isSuccess());

		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());
		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
	}

	private BPECSComputeInfrastructure getEmptyECSInfra() {

		BPECSComputeInfrastructure ecsi = new BPECSComputeInfrastructure();

		ecsi.setCoreCluster("");
		ecsi.setModelCluster("");
		ecsi.setDeployECSAccessKey("");
		ecsi.setDeployECSSecretKey("");
		ecsi.setDeployECSRegion("");
		ecsi.setExecuteECSAccessKey("");
		ecsi.setExecuteECSSecretKey("");
		ecsi.setExecuteECSRegion("");

		ecsi.setPrepareImage("");
		ecsi.setAwsCliImage("");

		return ecsi;
	}

	@Test
	public void testCopyLocalToLocal() throws BPException {

		URL furl = this.getClass().getClassLoader().getResource("sampleModelOutputFolderCreate/sample.sh");

		String runid = "tstrunid";

		ECSClient c = new ECSClient();
		c.setBPInfrastructure(getEmptyECSInfra());

		ECSClient client = Mockito.spy(c);

		File file = new File(furl.getFile());

		String destination = "/tmp/" + runid + "/sample.sh";

		ContainerOrchestratorCommandResult res = client.copyFileTo(file, destination, 10000L);

		assertTrue(res.isSuccess());

		assertTrue(new File("/tmp/" + runid + "/sample.sh").exists());

	}

	@Test
	public void testMove2() throws BPException {

		String coreCluster = "coreCluster";

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		i.setCoreCluster(coreCluster);

		ECSClient c = new ECSClient();
		c.setBPInfrastructure(i);

		ECSClient client = Mockito.spy(c);

		String source = "/folderPath/folder/folder2/";
		String target = "path";

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				String cmdtoexecute = ((String) invocation.getArguments()[0]);

				if (cmdtoexecute == null)
					throw new Exception("Found null command.");

				if (!"mv /folderPath/folder/folder2/ path".equalsIgnoreCase(cmdtoexecute))
					throw new Exception("Unexpected command: " + cmdtoexecute);

				return mockResult(true);
			}
		}).when(client).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		assertTrue(client.move(source, target, 10L).isSuccess());

		Mockito.verify(client, Mockito.times(1)).doExecuteLocalCmd(Mockito.any(), Mockito.any());

	}

	@Test
	public void testMove4() throws BPException {

		String coreCluster = "coreCluster";

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		i.setCoreCluster(coreCluster);

		ECSClient c = new ECSClient();
		c.setBPInfrastructure(i);

		ECSClient client = Mockito.spy(c);

		String source = "/folderPath/folder/folder2/";
		String target = "path";

		Mockito.doThrow(BPException.class).when(client).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		assertFalse(client.move(source, target, 10L).isSuccess());

		Mockito.verify(client, Mockito.times(1)).doExecuteLocalCmd(Mockito.any(), Mockito.any());

	}

	private ContainerOrchestratorCommandResult mockResult(boolean success) {
		ContainerOrchestratorCommandResult result = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(success).when(result).isSuccess();

		return result;
	}

	@Test
	public void reserveResourceTestCPUEmptyString() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerResources resource = Mockito.mock(VLabDockerResources.class);

		Mockito.doReturn("").when(resource).getCpu_units();

		Integer requiredMemory = 1024;
		Mockito.doReturn(requiredMemory + "").when(resource).getMemory_mb();

		String runid = "runid";

		ContainerOrchestratorReservationResult resultok = Mockito.mock(ContainerOrchestratorReservationResult.class);

		Mockito.doReturn(true).when(resultok).isAcquired();

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		List<Task> tasks = new ArrayList<>();

		Task t = Mockito.mock(Task.class);

		Mockito.doReturn("task/arnt").when(t).taskArn();
		tasks.add(t);

		Mockito.doReturn(tasks).when(runTaskResult).tasks();

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				RunTaskRequest runTaskRequest = (RunTaskRequest) invocation.getArguments()[0];

				if (!modelcluster.equalsIgnoreCase(runTaskRequest.cluster()))
					throw new Exception("Bad cluster: " + runTaskRequest.cluster());

				ContainerOverride containerOeverride = runTaskRequest.overrides().containerOverrides().get(0);

				if (!"AlpineSFTP".equalsIgnoreCase(containerOeverride.name()))
					throw new Exception("Bad container override name: " + containerOeverride.name());

				String excmd =
						"echo -n \"for i in \"  >> idleScript.sh && echo -n \"$\"  >> idleScript.sh && echo -n \"(seq \"  >> idleScript"
								+ ".sh &&  echo -n \"$\"  >> idleScript.sh && echo \"(( \"  >> idleScript.sh &&echo -n \"$\"  >> idleScript.sh && echo \"(getconf _NPROCESSORS_ONLN) / 2)) ); do\" >> idleScript.sh && echo \"yes > /dev/null &\" >> idleScript.sh && echo \"done\" >> idleScript.sh && echo \"while true; do\" >> idleScript.sh && echo \"sleep 5m\" >> idleScript.sh && echo \"done\" >> idleScript.sh && chmod 777 idleScript.sh && less idleScript.sh && /bin/sh idleScript.sh chmod 777 idleScript.sh && /bin/sh idleScript.sh ";
				if (!(excmd).equalsIgnoreCase(containerOeverride.command().get(0)))
					throw new Exception("Bad container command: " + containerOeverride.command().get(0) + " -- expected is " + excmd);

				Integer cpu = containerOeverride.cpu();

				if (cpu != null)
					throw new Exception("Bad cpu requested: " + cpu);

				Integer memory = containerOeverride.memoryReservation();

				if (memory - requiredMemory != 0)
					throw new Exception("Bad memory requested: " + memory);

				return runTaskResult;
			}
		}).when(ecs_ex).runTask((RunTaskRequest) Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[1];

				if (!modelcluster.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getReservationResult(Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max != 0)
					throw new Exception("Expected max retries 0, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		ContainerOrchestratorReservationResult result = c.reserveResources(resource);

		assertTrue(result.isAcquired());
	}

	@Test
	public void reserveResourceTestMemoryEmptyString() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerResources resource = Mockito.mock(VLabDockerResources.class);

		Integer requiredCpu = 100;
		Mockito.doReturn(requiredCpu + "").when(resource).getCpu_units();

		Mockito.doReturn("").when(resource).getMemory_mb();

		String runid = "runid";

		ContainerOrchestratorReservationResult resultok = Mockito.mock(ContainerOrchestratorReservationResult.class);

		Mockito.doReturn(true).when(resultok).isAcquired();

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		List<Task> tasks = new ArrayList<>();

		Task t = Mockito.mock(Task.class);

		Mockito.doReturn("task/arnt").when(t).taskArn();
		tasks.add(t);

		Mockito.doReturn(tasks).when(runTaskResult).tasks();

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				RunTaskRequest runTaskRequest = (RunTaskRequest) invocation.getArguments()[0];

				if (!modelcluster.equalsIgnoreCase(runTaskRequest.cluster()))
					throw new Exception("Bad cluster: " + runTaskRequest.cluster());

				ContainerOverride containerOeverride = runTaskRequest.overrides().containerOverrides().get(0);

				if (!"AlpineSFTP".equalsIgnoreCase(containerOeverride.name()))
					throw new Exception("Bad container override name: " + containerOeverride.name());

				String excmd =
						"echo -n \"for i in \"  >> idleScript.sh && echo -n \"$\"  >> idleScript.sh && echo -n \"(seq \"  >> idleScript"
								+ ".sh &&  echo -n \"$\"  >> idleScript.sh && echo \"(( \"  >> idleScript.sh &&echo -n \"$\"  >> idleScript.sh && echo \"(getconf _NPROCESSORS_ONLN) / 2)) ); do\" >> idleScript.sh && echo \"yes > /dev/null &\" >> idleScript.sh && echo \"done\" >> idleScript.sh && echo \"while true; do\" >> idleScript.sh && echo \"sleep 5m\" >> idleScript.sh && echo \"done\" >> idleScript.sh && chmod 777 idleScript.sh && less idleScript.sh && /bin/sh idleScript.sh chmod 777 idleScript.sh && /bin/sh idleScript.sh ";
				if (!(excmd).equalsIgnoreCase(containerOeverride.command().get(0)))
					throw new Exception("Bad container command: " + containerOeverride.command().get(0) + " -- expected is " + excmd);

				Integer cpu = containerOeverride.cpu();

				if (cpu - requiredCpu != 0)
					throw new Exception("Bad cpu requested: " + cpu);

				Integer memory = containerOeverride.memoryReservation();

				if (memory != null)
					throw new Exception("Bad memory requested: " + memory);

				return runTaskResult;
			}
		}).when(ecs_ex).runTask((RunTaskRequest) Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[1];

				if (!modelcluster.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getReservationResult(Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max != 0)
					throw new Exception("Expected max retries 0, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		ContainerOrchestratorReservationResult result = c.reserveResources(resource);

		assertTrue(result.isAcquired());
	}

	@Test
	public void reserveResourceTestCPUNull() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerResources resource = Mockito.mock(VLabDockerResources.class);

		Mockito.doReturn(null).when(resource).getCpu_units();

		Integer requiredMemory = 1024;
		Mockito.doReturn(requiredMemory + "").when(resource).getMemory_mb();

		String runid = "runid";

		ContainerOrchestratorReservationResult resultok = Mockito.mock(ContainerOrchestratorReservationResult.class);

		Mockito.doReturn(true).when(resultok).isAcquired();

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		List<Task> tasks = new ArrayList<>();

		Task t = Mockito.mock(Task.class);

		Mockito.doReturn("task/arnt").when(t).taskArn();
		tasks.add(t);

		Mockito.doReturn(tasks).when(runTaskResult).tasks();

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				RunTaskRequest runTaskRequest = (RunTaskRequest) invocation.getArguments()[0];

				if (!modelcluster.equalsIgnoreCase(runTaskRequest.cluster()))
					throw new Exception("Bad cluster: " + runTaskRequest.cluster());

				ContainerOverride containerOeverride = runTaskRequest.overrides().containerOverrides().get(0);

				if (!"AlpineSFTP".equalsIgnoreCase(containerOeverride.name()))
					throw new Exception("Bad container override name: " + containerOeverride.name());

				String excmd =
						"echo -n \"for i in \"  >> idleScript.sh && echo -n \"$\"  >> idleScript.sh && echo -n \"(seq \"  >> idleScript"
								+ ".sh &&  echo -n \"$\"  >> idleScript.sh && echo \"(( \"  >> idleScript.sh &&echo -n \"$\"  >> idleScript.sh && echo \"(getconf _NPROCESSORS_ONLN) / 2)) ); do\" >> idleScript.sh && echo \"yes > /dev/null &\" >> idleScript.sh && echo \"done\" >> idleScript.sh && echo \"while true; do\" >> idleScript.sh && echo \"sleep 5m\" >> idleScript.sh && echo \"done\" >> idleScript.sh && chmod 777 idleScript.sh && less idleScript.sh && /bin/sh idleScript.sh chmod 777 idleScript.sh && /bin/sh idleScript.sh ";
				if (!(excmd).equalsIgnoreCase(containerOeverride.command().get(0)))
					throw new Exception("Bad container command: " + containerOeverride.command().get(0) + " -- expected is " + excmd);

				Integer cpu = containerOeverride.cpu();

				if (cpu != null)
					throw new Exception("Bad cpu requested: " + cpu);

				Integer memory = containerOeverride.memoryReservation();

				if (memory - requiredMemory != 0)
					throw new Exception("Bad memory requested: " + memory);

				return runTaskResult;
			}
		}).when(ecs_ex).runTask((RunTaskRequest) Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[1];

				if (!modelcluster.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getReservationResult(Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max != 0)
					throw new Exception("Expected max retries 0, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		ContainerOrchestratorReservationResult result = c.reserveResources(resource);

		assertTrue(result.isAcquired());
	}

	@Test
	public void reserveResourceTestMemoryNull() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerResources resource = Mockito.mock(VLabDockerResources.class);

		Integer requiredCpu = 100;
		Mockito.doReturn(requiredCpu + "").when(resource).getCpu_units();

		Mockito.doReturn(null).when(resource).getMemory_mb();

		String runid = "runid";

		ContainerOrchestratorReservationResult resultok = Mockito.mock(ContainerOrchestratorReservationResult.class);

		Mockito.doReturn(true).when(resultok).isAcquired();

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		List<Task> tasks = new ArrayList<>();

		Task t = Mockito.mock(Task.class);

		Mockito.doReturn("task/arnt").when(t).taskArn();
		tasks.add(t);

		Mockito.doReturn(tasks).when(runTaskResult).tasks();

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				RunTaskRequest runTaskRequest = (RunTaskRequest) invocation.getArguments()[0];

				if (!modelcluster.equalsIgnoreCase(runTaskRequest.cluster()))
					throw new Exception("Bad cluster: " + runTaskRequest.cluster());

				ContainerOverride containerOeverride = runTaskRequest.overrides().containerOverrides().get(0);

				if (!"AlpineSFTP".equalsIgnoreCase(containerOeverride.name()))
					throw new Exception("Bad container override name: " + containerOeverride.name());

				String excmd =
						"echo -n \"for i in \"  >> idleScript.sh && echo -n \"$\"  >> idleScript.sh && echo -n \"(seq \"  >> idleScript"
								+ ".sh &&  echo -n \"$\"  >> idleScript.sh && echo \"(( \"  >> idleScript.sh &&echo -n \"$\"  >> idleScript.sh && echo \"(getconf _NPROCESSORS_ONLN) / 2)) ); do\" >> idleScript.sh && echo \"yes > /dev/null &\" >> idleScript.sh && echo \"done\" >> idleScript.sh && echo \"while true; do\" >> idleScript.sh && echo \"sleep 5m\" >> idleScript.sh && echo \"done\" >> idleScript.sh && chmod 777 idleScript.sh && less idleScript.sh && /bin/sh idleScript.sh chmod 777 idleScript.sh && /bin/sh idleScript.sh ";
				if (!(excmd).equalsIgnoreCase(containerOeverride.command().get(0)))
					throw new Exception("Bad container command: " + containerOeverride.command().get(0) + " -- expected is " + excmd);

				Integer cpu = containerOeverride.cpu();

				if (cpu - requiredCpu != 0)
					throw new Exception("Bad cpu requested: " + cpu);

				Integer memory = containerOeverride.memoryReservation();

				if (memory != null)
					throw new Exception("Bad memory requested: " + memory);

				return runTaskResult;
			}
		}).when(ecs_ex).runTask((RunTaskRequest) Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[1];

				if (!modelcluster.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getReservationResult(Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max != 0)
					throw new Exception("Expected max retries 0, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());
		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		ContainerOrchestratorReservationResult result = c.reserveResources(resource);

		assertTrue(result.isAcquired());
	}

	@Test
	public void reserveResourceTest() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerResources resource = Mockito.mock(VLabDockerResources.class);

		Integer requiredCpu = 100;
		Mockito.doReturn(requiredCpu + "").when(resource).getCpu_units();

		Integer requiredMemory = 1024;
		Mockito.doReturn(requiredMemory + "").when(resource).getMemory_mb();

		String runid = "runid";

		ContainerOrchestratorReservationResult resultok = Mockito.mock(ContainerOrchestratorReservationResult.class);

		Mockito.doReturn(true).when(resultok).isAcquired();

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		List<Task> tasks = new ArrayList<>();

		Task t = Mockito.mock(Task.class);

		Mockito.doReturn("task/arnt").when(t).taskArn();
		tasks.add(t);

		Mockito.doReturn(tasks).when(runTaskResult).tasks();

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				RunTaskRequest runTaskRequest = (RunTaskRequest) invocation.getArguments()[0];

				if (!modelcluster.equalsIgnoreCase(runTaskRequest.cluster()))
					throw new Exception("Bad cluster: " + runTaskRequest.cluster());

				ContainerOverride containerOeverride = runTaskRequest.overrides().containerOverrides().get(0);

				if (!"AlpineSFTP".equalsIgnoreCase(containerOeverride.name()))
					throw new Exception("Bad container override name: " + containerOeverride.name());
				String excmd =
						"echo -n \"for i in \"  >> idleScript.sh && echo -n \"$\"  >> idleScript.sh && echo -n \"(seq \"  >> idleScript"
								+ ".sh &&  echo -n \"$\"  >> idleScript.sh && echo \"(( \"  >> idleScript.sh &&echo -n \"$\"  >> idleScript.sh && echo \"(getconf _NPROCESSORS_ONLN) / 2)) ); do\" >> idleScript.sh && echo \"yes > /dev/null &\" >> idleScript.sh && echo \"done\" >> idleScript.sh && echo \"while true; do\" >> idleScript.sh && echo \"sleep 5m\" >> idleScript.sh && echo \"done\" >> idleScript.sh && chmod 777 idleScript.sh && less idleScript.sh && /bin/sh idleScript.sh chmod 777 idleScript.sh && /bin/sh idleScript.sh ";
				if (!(excmd).equalsIgnoreCase(containerOeverride.command().get(0)))
					throw new Exception("Bad container command: " + containerOeverride.command().get(0) + " -- expected is " + excmd);

				Integer cpu = containerOeverride.cpu();

				if (cpu - requiredCpu != 0)
					throw new Exception("Bad cpu requested: " + cpu);

				Integer memory = containerOeverride.memoryReservation();

				if (memory - requiredMemory != 0)
					throw new Exception("Bad memory requested: " + memory);

				return runTaskResult;
			}
		}).when(ecs_ex).runTask((RunTaskRequest) Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[1];

				if (!modelcluster.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getReservationResult(Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max != 0)
					throw new Exception("Expected max retries 0, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());
		ContainerOrchestratorReservationResult result = c.reserveResources(resource);

		assertTrue(result.isAcquired());
	}

	@Test
	public void releaseTest() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerImage image = Mockito.mock(VLabDockerImage.class);

		VLabDockerContainer container = Mockito.mock(VLabDockerContainer.class);
		Mockito.doReturn(container).when(image).getContainer();

		ContainerOrchestratorReservationResult reservation = Mockito.mock(ContainerOrchestratorReservationResult.class);

		String reservationArn = "reservationArn";

		Mockito.doReturn(reservationArn).when(reservation).getTaskArn();
		Mockito.doReturn(Boolean.TRUE).when(reservation).isAcquired();

		StopTaskResponse StopTaskResponse = Mockito.mock(StopTaskResponse.class);
		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				StopTaskRequest stopRequest = (StopTaskRequest) invocation.getArguments()[0];

				if (!modelcluster.equalsIgnoreCase(stopRequest.cluster()))
					throw new Exception("Bad model cluster");

				if (!reservationArn.equalsIgnoreCase(stopRequest.task()))
					throw new Exception("Bad task arn");

				return StopTaskResponse;
			}
		}).when(ecs_ex).stopTask((StopTaskRequest) Mockito.any());

		c.release(reservation);

		Mockito.verify(ecs_ex, Mockito.times(1)).stopTask((StopTaskRequest) Mockito.any());
	}

	@Test
	public void releaseTest2() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerImage image = Mockito.mock(VLabDockerImage.class);

		VLabDockerContainer container = Mockito.mock(VLabDockerContainer.class);
		Mockito.doReturn(container).when(image).getContainer();

		ContainerOrchestratorReservationResult reservation = Mockito.mock(ContainerOrchestratorReservationResult.class);

		String reservationArn = "reservationArn";

		Mockito.doReturn(reservationArn).when(reservation).getTaskArn();
		Mockito.doReturn(Boolean.FALSE).when(reservation).isAcquired();

		c.release(reservation);

		Mockito.verify(ecs_ex, Mockito.times(0)).stopTask((StopTaskRequest) Mockito.any());
	}

	@Test
	public void runImageTest() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerImage image = Mockito.mock(VLabDockerImage.class);

		VLabDockerContainer container = Mockito.mock(VLabDockerContainer.class);
		Mockito.doReturn(container).when(image).getContainer();

		ContainerOrchestratorReservationResult reservation = Mockito.mock(ContainerOrchestratorReservationResult.class);

		String reservationArn = "reservationArn";

		Mockito.doReturn(reservationArn).when(reservation).getTaskArn();
		Mockito.doReturn(Boolean.TRUE).when(reservation).isAcquired();

		String runid = "runid";

		BPRunStatus status = Mockito.mock(BPRunStatus.class);

		ECSModelTask emt = Mockito.mock(ECSModelTask.class);
		RunTaskRequest runTaskRequest = Mockito.mock(RunTaskRequest.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String rid = (String) invocation.getArguments()[1];

				if (!runid.equalsIgnoreCase(rid))
					throw new Exception("Bad run id: " + rid);

				return runTaskRequest;
			}

		}).when(emt).createRunTaskRequest(Mockito.any(), Mockito.any());

		String containerName = "containerName";

		Mockito.doReturn(emt).when(c).createECSModelTask(containerName);

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		List<Task> tasks = new ArrayList<>();

		Task t = Mockito.mock(Task.class);

		Mockito.doReturn("task/arnt").when(t).taskArn();
		tasks.add(t);

		Mockito.doReturn(tasks).when(runTaskResult).tasks();

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				RunTaskRequest runTaskRequest = (RunTaskRequest) invocation.getArguments()[0];

				if (!modelcluster.equalsIgnoreCase(runTaskRequest.cluster()))
					throw new Exception("Bad cluster: " + runTaskRequest.cluster());

				return runTaskResult;
			}
		}).when(ecs_ex).runTask((RunTaskRequest) Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[2];

				if (!modelcluster.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String id = (String) invocation.getArguments()[0];

				if (!"arnt".equalsIgnoreCase(id))
					throw new Exception("Bad model task id " + id);

				return null;
			}
		}).when(status).setModelTaskId(Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max != 0)
					throw new Exception("Expected max retries 0, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSModelTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());
		ContainerOrchestratorCommandResult result = c.runImage(image, reservation, "runfolder", 19L, runid, status);

		assertTrue(result.isSuccess());

		Mockito.verify(ecs_ex, Mockito.times(1)).stopTask((StopTaskRequest) Mockito.any());
	}

	@Test
	public void runImageTest2() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		String core = "core";

		i.setCoreCluster(core);

		String modelcluster = "modelcluster";
		i.setModelCluster(modelcluster);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		VLabDockerImage image = Mockito.mock(VLabDockerImage.class);

		VLabDockerContainer container = Mockito.mock(VLabDockerContainer.class);
		Mockito.doReturn(container).when(image).getContainer();

		ContainerOrchestratorReservationResult reservation = Mockito.mock(ContainerOrchestratorReservationResult.class);

		String reservationArn = "reservationArn";

		Mockito.doReturn(reservationArn).when(reservation).getTaskArn();
		Mockito.doReturn(Boolean.TRUE).when(reservation).isAcquired();

		String runid = "runid";

		BPRunStatus status = Mockito.mock(BPRunStatus.class);

		ECSModelTask emt = Mockito.mock(ECSModelTask.class);
		RunTaskRequest runTaskRequest = Mockito.mock(RunTaskRequest.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String rid = (String) invocation.getArguments()[1];

				if (!runid.equalsIgnoreCase(rid))
					throw new Exception("Bad run id: " + rid);

				return runTaskRequest;
			}

		}).when(emt).createRunTaskRequest(Mockito.any(), Mockito.any());

		String containerName = "containerName";

		Mockito.doReturn(emt).when(c).createECSModelTask(containerName);

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				RunTaskRequest runTaskRequest = (RunTaskRequest) invocation.getArguments()[0];

				if (!modelcluster.equalsIgnoreCase(runTaskRequest.cluster()))
					throw new Exception("Bad cluster: " + runTaskRequest.cluster());

				return runTaskResult;
			}
		}).when(ecs_ex).runTask((RunTaskRequest) Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[2];

				if (!modelcluster.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max != 0)
					throw new Exception("Expected max retries 0, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSModelTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		ContainerOrchestratorCommandResult result = c.runImage(image, reservation, "runfolder", 19L, runid, status);

		assertTrue(result.isSuccess());

		Mockito.verify(ecs_ex, Mockito.times(1)).stopTask((StopTaskRequest) Mockito.any());
	}

	@Test
	public void addParamTest() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		Integer val = 3;
		String target = "target";

		ContainerOrchestratorCommandResult createDritResultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(createDritResultok).isSuccess();

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return createDritResultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		Mockito.doNothing().when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());
		assertTrue(c.appendParamTo(k, val, target, 10L).isSuccess());

	}

	@Test
	public void addParamTest2() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		Integer val = 3;
		String target = "target";

		ContainerOrchestratorCommandResult createDritResultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(false).when(createDritResultok).isSuccess();

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return createDritResultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		assertFalse(c.appendParamTo(k, val, target, 10L).isSuccess());
	}

	@Test
	public void addParamTest3() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		Integer val = 3;
		String target = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(false).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		Mockito.doNothing().when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ContainerOrchestratorCommandResult createDritResultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(createDritResultok).isSuccess();

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return createDritResultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		assertTrue(c.appendParamTo(k, val, target, 10L).isSuccess());

		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());
	}

	@Test
	public void addParamTest4() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		Integer val = 3;
		String target = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(false).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		Mockito.doThrow(BPException.class).when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ContainerOrchestratorCommandResult createDritResultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(createDritResultok).isSuccess();

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return createDritResultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		assertFalse(c.appendParamTo(k, val, target, 10L).isSuccess());

		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());

		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());
	}

	@Test
	public void addParamTestTest() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		String val = "val";
		String target = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		ContainerOrchestratorCommandResult createDritResultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(createDritResultok).isSuccess();

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return createDritResultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		Mockito.doNothing().when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		assertTrue(c.appendParamTo(k, val, target, 10L).isSuccess());
	}

	@Test
	public void addParamTestText3() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		String val = "val";
		String target = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(false).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		Mockito.doNothing().when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ContainerOrchestratorCommandResult createDritResultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(createDritResultok).isSuccess();

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return createDritResultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		assertTrue(c.appendParamTo(k, val, target, 10L).isSuccess());

		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());

		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());
	}

	@Test
	public void addParamTest3_1() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		Integer val = 3;
		String target = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		Mockito.doNothing().when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return resultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		assertTrue(c.appendParamTo(k, val, target, 10L).isSuccess());

		Mockito.verify(c, Mockito.times(1)).createDirectory(Mockito.any(), Mockito.any());

		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());
	}

	@Test
	public void addParamTestText3_1() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		String val = "val";
		String target = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).createDirectory(Mockito.any(), Mockito.any());

		Mockito.doNothing().when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return resultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		assertTrue(c.appendParamTo(k, val, target, 10L).isSuccess());

		Mockito.verify(c, Mockito.times(1)).createDirectory(Mockito.any(), Mockito.any());

		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());

		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());
	}

	@Test
	public void addParamTestText4() throws BPException {

		expectedException.expect(BPException.class);

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String k = "k";
		String val = "val";
		String target = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(false).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		Mockito.doThrow(BPException.class).when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		ContainerOrchestratorCommandResult createDritResultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(createDritResultok).isSuccess();

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String max = (String) invocation.getArguments()[0];

				if (!target.equalsIgnoreCase(max))
					throw new Exception("Expected to create " + target + " but, found " + max);

				return createDritResultok;
			}

		}).when(c).createDirectory(Mockito.any(), Mockito.any());

		assertFalse(c.appendParamTo(k, val, target, 10L).isSuccess());

		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());

		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());
	}

	@Test
	public void saveFileToS3Test() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSRegion("us-east-1");

		i.setS3AccessKey(ak);
		i.setS3SecretKey(sk);

		i.setS3ServiceUrl(Optional.empty());

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String s3key = "k";
		String bucket = "val";
		String filepath = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[2];

				if (!core.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		Mockito.doReturn(runTaskResult).when(ecs_core).runTask((RunTaskRequest) Mockito.any());

		assertTrue(c.saveFileToWebStorage(filepath, bucket, s3key, true, 10L).isSuccess());

	}

	@Test
	public void saveFolderToS3Test() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setExecuteECSRegion("us-east-1");

		i.setS3AccessKey(ak);
		i.setS3SecretKey(sk);

		i.setS3ServiceUrl(Optional.empty());

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String s3key = "k";
		String bucket = "val";
		String filepath = "target";

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doReturn(resultok).when(c).mkDir(Mockito.any(), Mockito.any());

		Mockito.doThrow(BPException.class).when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		RunTaskResponse runTaskResult = Mockito.mock(RunTaskResponse.class);

		Mockito.doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				String cluster = (String) invocation.getArguments()[2];

				if (!core.equalsIgnoreCase(cluster))
					throw new Exception("Bad cluster " + cluster);

				return resultok;
			}
		}).when(taskManager).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());

		ECSModelTask preparatoryTask = Mockito.mock(ECSModelTask.class);
		Mockito.doReturn(preparatoryTask).when(c).createECSPreparatoryTask(Mockito.any());

		Mockito.doReturn(RunTaskRequest.builder().build()).when(preparatoryTask).createRunTaskRequest(Mockito.any(), Mockito.any());

		Mockito.doReturn(runTaskResult).when(ecs_core).runTask((RunTaskRequest) Mockito.any());

		assertTrue(c.saveFolderToWebStorage(filepath, bucket, s3key, true, 10L).isSuccess());

	}

	@Test
	public void removeFolderTest() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);
		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String filepath = "target";

		Mockito.doNothing().when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		assertTrue(c.removeDirectory(filepath, 10L).isSuccess());

	}

	@Test
	public void removeFolderTest3() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String s3key = "k";
		String bucket = "val";
		String filepath = "target";

		Mockito.doThrow(BPException.class).when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		Mockito.doThrow(BPException.class).when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		assertFalse(c.removeDirectory(filepath, 10L).isSuccess());

	}

	@Test
	public void mkDirTest() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String s3key = "k";
		String bucket = "val";
		List<String> dirs = new ArrayList<>();

		dirs.add(s3key);
		dirs.add(bucket);

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doThrow(BPException.class).when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doNothing().when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		assertTrue(c.mkDir(dirs, 10L).isSuccess());

		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());

	}

	@Test
	public void mkDirTest2() throws BPException {

		BPECSComputeInfrastructure i = getEmptyECSInfra();

		String core = "core";

		i.setCoreCluster(core);

		String ak = "ak";
		String sk = "sk";

		String eak = "eak";
		String esk = "esk";

		i.setDeployECSAccessKey(ak);
		i.setDeployECSSecretKey(sk);
		i.setDeployECSRegion("us-east-1");

		i.setExecuteECSAccessKey(eak);
		i.setExecuteECSSecretKey(esk);
		i.setDeployECSRegion("us-east-1");

		EcsClient ecs_core = Mockito.mock(EcsClient.class);
		EcsClient ecs_ex = Mockito.mock(EcsClient.class);

		ECSClient c = Mockito.spy(new ECSClient());
		c.setBPInfrastructure(i);
		c.setCoreClient(ecs_core);
		c.setExecutionClient(ecs_ex);

		String s3key = "k";
		String bucket = "val";
		List<String> dirs = new ArrayList<>();

		dirs.add(s3key);
		dirs.add(bucket);

		ContainerOrchestratorCommandResult resultok = Mockito.mock(ContainerOrchestratorCommandResult.class);

		Mockito.doReturn(true).when(resultok).isSuccess();

		Mockito.doThrow(BPException.class).when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		ECSTaskManager taskManager = Mockito.mock(ECSTaskManager.class);

		Mockito.doAnswer(new Answer() {

			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {

				Integer max = (Integer) invocation.getArguments()[2];

				if (max - 5 != 0)
					throw new Exception("Expected max retries 5, found " + max);

				return taskManager;
			}

		}).when(c).createTaskManager(Mockito.any(), Mockito.any(), Mockito.any());

		Mockito.doThrow(BPException.class).when(c).doExecuteLocalCmd(Mockito.any(), Mockito.any());

		assertTrue(c.mkDir(dirs, 10L).isSuccess());

		Mockito.verify(ecs_ex, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(ecs_core, Mockito.times(0)).runTask((RunTaskRequest) Mockito.any());
		Mockito.verify(taskManager, Mockito.times(0)).getTaskResult(Mockito.any(), Mockito.any(), Mockito.any());
		URL dirUrl = this.getClass().getClassLoader().getResource("sampleModelOutputFolderCreate/");
		File f = new File(dirUrl.getFile() + "../../../dirScript.sh");
		f.deleteOnExit();

	}

}