package eu.essi_lab.vlab.core.datamodel;

/**
 * @author Mattia Santoro
 */
public class BPException extends Exception {

	private String userMessage = "An error occourred processing your request. Administrators were notified.";

	private Integer erroCode;

	public enum ERROR_CODES {
		NO_REQUEST_FOUND(1),
		UNKNOWN_REQUEST_FOUND(2),
		RESOURCE_NOT_FOUND(3),
		INVALID_REQUEST(4),
		BPRUN_REGISTRY_ERROR(5),
		STATUS_REGISTRY_ERROR(6),
		CLEAN_RESOURCE_EXCEPTION(7),
		OPERATION_NOT_SUPPORTED(8),
		AWS_SQS_INIT_ERROR(9),
		AWS_S3_BUCKET_INIT_ERROR(10),
		BPSTATUSRUN_REGISTRY_ERROR(11),
		BPRUN_PULL_ERROR(12),
		BPRUN_PULL_RESULT_HANDLING_ERROR(13),
		BAD_CONFIGURATION(14),
		NO_BP_REALIZATION(15),
		RESOURCES_RESERVATION_ERROR(16),
		RESOURCES_RELEASE_ERROR(17),
		NO_ADAPTER_AVAILABLE(18),
		NO_VALIDATION_PLAN(19),
		SERIALIZATION_ERR(20),
		IO_FILE_NOT_FOUND(21),
		UNKNOWN(22),
		BAD_WORKFLOWID(23),
		API_CALL_ERROR(24),
		EMPTY_S3_BUCKET(25),
		NO_DOCKER_IMAGE_FILE_FUOND(26),
		DOUBLE_INPUT_ID(27),
		SHARED_WITH_TOO_MANY(29),
		NOT_AUTHORIZED(30),
		ES_WRITE_ERROR(31),
		ES_WRITE_IOERROR(32),
		ES_DELETE_ERROR(33),
		ES_DELETE_IOERROR(34),
		ES_GET_ERROR(35),
		ES_GET_PARSEERROR(36),
		ES_GET_IOERROR(37),
		BAD_ES_RESPONSE(38),
		RDF_UPDATE_ERRO(39),
		UNPARSABLE_JSON(40),
		ERROR_COPYING_SCRIPTS(41),
		SCRIPT_COPY_ERROR(42),
		UNEXPECTED_NUMBER_FORMAT_FOR_MODEL_PARAM(43),

		LOCAL_COMMAND_ERROR(44),

		DIAS_API_ERROR(45),

		AWS_S3_READ_ERROR(46),
		AWS_COPY_BAND_ERROR(47),
		AWS_S3_PUT_ERROR(48),
		SAVE_OUTPUT_ERROR(49),
		MODEL_EXECUTION_ERROR(50),
		SCRIPTS_FILE_NOT_FOUND(51),
		ERROR_INGESTING_INPUT(52),
		IO_FILE_READ_ERROR(53),
		SCRIPTS_FILE_READ_ERROR(54),
		DOCKER_IMAGE_READ_ERROR(55),
		CREATE_OUTPUT_FOLDER_ERROR(56),
		ERROR_INGESTING_SCRIPTS(57),
		ERROR_GIT_CLONE(58),
		ERROR_GIT_AWS_CREDENTIALS(59),
		NO_TASK_FAMILY(60),
		TASK_REGISTRATION_FAIL(61),
		MOVED_CONTROLLER_STOP_ERROR(62),
		MOVED_CONTROLLER_RUN_ERROR(63),
		STREAM_TO_STRING_ERR(64),
		QUEUE_SEND_MESSAGE_ERROR(65),
		NO_QUEUE_MESSAGE_RECIPT_HANDLER(66),
		BAD_QUEUE_MESSAGE_RECIPT_HANDLER(67),
		QUEUE_DELETE_MESSAGE_ERROR(68),
		QUEUE_RECEIVE_MESSAGE_ERROR(69),
		ERROR_GIT_CLONE_NO_SPACE_LEFT(70),
		OAUTH_NOT_CONFIGURED_ERR_ID(71),
		MISSING_OATH_CONF_FILE_ERR_ID(72),
		INVALID_OAUTH_PARAM_VALUE_ERR_ID(73),
		INVALID_JWT_TOKEN(74),
		NULL_HTTP_RESPONSE_PROVIDED_ERR_ID(75),
		REDIRECT_IOEXCEPTIO_ERR_ID(76),
		NULL_HTTP_REQUEST_PROVIDED_ERR_ID(77),
		NULL_OR_EMPTY_CODE_ERR_ID(78),
		NULL_TOKEN_ERR_ID(79),
		IOEXCEPTION_TOKEN_ERR_ID(80),
		IOEXCEPTION_EMAIL_ERR_ID(81),
		BAD_CODE_TOKEN_ERR_ID(82),
		IOEXCEPTION_TWITTER_ERR_ID(83),
		ENCODING_EXCEPTION_ERR_ID(84),
		NO_OAUTH_VERIFIER_ERR_ID(85),
		OAUTH_TOKEN_MISMATCH_VERIFIER_ERR_ID(86),
		SIGNATURE_EXCEPTION_ERR_ID(87),
		UNSUPPORTED_OAUTH_PROVIDER(88),
		MISSING_OATH_CONF_PARAM(89),
		LOGIN_CALLBACK_INVALID(90),
		INVALID_CLIET_REDIRECT(91),
		BAD_RSA_PUBLIC_KEY(92),
		BAD_RSA_PRIVATE_KEY(93),
		ENCRYPT_ERROR(94),
		DECRYPT_ERROR(95),
		URL_READ_ERROR(96),
		BAD_WMS_OBJECT(97),
		RDF_STORE_ERROR(98),
		UNEXPECTED_STATUS_AFTER_MOVE(99),
		MOVE_CONTROLLER_ERROR(100),
		VLAB_CONTROLLER_IMAGE_MISSING(101),
		VLAB_CONTROLLER_BPRUN_MISSING(102),
		BPRUN_EXECUTE_ERROR(103),
		VCLOUD_OPTIMIZER_RESPONSE_DESERIALIZE_ERR(104),
		UNSUPPORTED_EXECUTION_INFRASTRUCTURE(105),
		NO_REQUIRED_RESOURCES_FOUND(106),
		ERR_MOVE_TO_TRIGGERED(107),
		REMOTE_CONTROLLER_DEPLOY_ERROR(108),
		REMOTE_CONTROLLER_SERVICE_ERROR(109),
		FILE_COPY_ERROR(110),
		UNKNOWN_DT_COMPUTE_ENGINE_IMPL(111),
		TASK_LOG_READ_ERROR(112),
		QUEUE_EXTEND_MESSAGE_ERROR(113),
		UNKNOWN_INRA_PROVIDER(114),
		NO_CONTAINER_ORCHESTRATOR_MANAGER(115),
		NO_SOURCECODE_FILE_LOADER_FOUND(116),
		NO_INPUT_INGESTOR(117),
		NO_OUTPUT_INGESTOR(118);

		private final int c;

		ERROR_CODES(int i) {
			c = i;
		}

		public Integer getCode() {
			return c;
		}

		public static ERROR_CODES decode(Integer code) {

			if (code == null)
				return UNKNOWN;

			ERROR_CODES[] vals = values();

			for (ERROR_CODES v : vals)
				if (v.getCode() - code == 0)
					return v;

			return UNKNOWN;
		}
	}

	public BPException() {
	}

	public BPException(String message) {
		super(message);
	}

	public BPException(String message, Integer code) {
		super(message);
		this.erroCode = code;
	}

	public BPException(String message, ERROR_CODES c) {
		this(message, c.getCode());
	}

	public Integer getErroCode() {
		return erroCode;
	}

	public void setErroCode(Integer erroCode) {
		this.erroCode = erroCode;
	}

	public String getUserMessage() {
		return userMessage;
	}

	public void setUserMessage(String userMessage) {
		this.userMessage = userMessage;
	}

	@Override
	public String toString() {

		StringBuilder builder = new StringBuilder("BPException: ").append(this.getMessage());

		if (this.erroCode != null)
			builder.append(" (error code ").append(this.erroCode).append(": ").append(ERROR_CODES.decode(this.erroCode)).append(")");

		return builder.toString();

	}
}
